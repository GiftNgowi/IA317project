{"ast":null,"code":"import FooterView from \"./FooterView.vue\";\nimport { ethers } from \"ethers\";\nimport { ABI, contractAddress } from \"../../constants\";\nexport default {\n  name: \"UserAccount\",\n  components: {\n    FooterView\n  },\n  data() {\n    return {\n      name: \"\",\n      emal: \"\",\n      users: [],\n      valid: true,\n      name: \"\",\n      nameRules: [v => !!v || \"Name is required\", v => v && v.length <= 10 || \"Name must be less than 10 characters\"],\n      email: \"\",\n      emailRules: [v => !!v || \"E-mail is required\", v => /.+@.+\\..+/.test(v) || \"E-mail must be valid\"],\n      password: \"\",\n      confirmPassword: \"\",\n      passwordRules: [v => !!v || \"Password is required\"],\n      confirmPasswordRules: [v => !!v || \"Password is required\"]\n    };\n  },\n  computed: {\n    passwordConfirmationRule() {\n      return () => this.password === this.confirmPassword || \"Password must match\";\n    }\n  },\n  methods: {\n    async createAccount(e) {\n      //  element.addEventListener(\"click\", createAccount),\n      e.preventDefault();\n      let name = this.name;\n      let email = this.email;\n      let password = this.password;\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, ABI, signer);\n      const response = await contract.createAccount(name, email, password);\n      console.log(response);\n      this.name = \"\";\n      this.email = \"\";\n      this.password = \"\";\n    }\n  }\n};","map":{"version":3,"mappings":"AAqFA;AACA;AACA;AACA;EACAA;EACAC;IACAC;EACA;EACAC;IACA;MACAH;MACAI;MACAC;MACAC;MACAN;MACAO,YACAC,gCACAA,mEACA;MACAC;MACAC,aACAF,kCACAA,mDACA;MACAG;MACAC;MACAC;MACAC;IACA;EACA;EACAC;IACAC;MACA,aACA;IACA;EACA;EACAC;IACA;MACA;MACAC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACAC;MACA;MACA;MACA;IACA;EACA;AACA","names":["name","components","FooterView","data","emal","users","valid","nameRules","v","email","emailRules","password","confirmPassword","passwordRules","confirmPasswordRules","computed","passwordConfirmationRule","methods","e","console"],"sourceRoot":"src/components","sources":["UserAccount.vue"],"sourcesContent":["<template>\n  <v-app>\n    <v-app-bar absolute> </v-app-bar>\n\n    <v-container>\n      <v-row align=\"center\" justify=\"right\" class=\"mt-15\">\n        <v-col>\n          <p class=\"text-h6 justify-center\">Create Account</p>\n          <v-divider></v-divider>\n          <v-container>\n            <v-form\n              @submit=\"createAccount\"\n              ref=\"form\"\n              v-model=\"valid\"\n              lazy-validation\n            >\n              <v-row>\n                <v-col cols=\"12\" sm=\"6\">\n                  <v-text-field\n                    v-model=\"name\"\n                    :rules=\"nameRules\"\n                    label=\"Username:\"\n                    outlined\n                    required\n                  ></v-text-field>\n                </v-col>\n              </v-row>\n              <v-row>\n                <v-col cols=\"12\" sm=\"6\">\n                  <v-text-field\n                    v-model=\"email\"\n                    :rules=\"emailRules\"\n                    label=\"Email:\"\n                    outlined\n                    required\n                  ></v-text-field>\n                </v-col>\n              </v-row>\n\n              <v-row>\n                <v-col cols=\"12\" sm=\"6\">\n                  <v-text-field\n                    label=\"Password:\"\n                    v-model=\"password\"\n                    :rules=\"passwordRules\"\n                    type=\"password\"\n                    required\n                    outlined\n                  ></v-text-field>\n                </v-col>\n              </v-row>\n              <v-row>\n                <v-col cols=\"12\" sm=\"6\">\n                  <v-text-field\n                    label=\"Confirm Password:\"\n                    v-model=\"confirmPassword\"\n                    :rules=\"[confirmPasswordRules, passwordConfirmationRule]\"\n                    type=\"password\"\n                    required\n                    outlined\n                  ></v-text-field>\n                </v-col>\n              </v-row>\n\n              <v-btn\n                class=\"mt-0\"\n                type=\"submit\"\n                elevation=\"20\"\n                color=\"primary\"\n                width=\"200\"\n                height=\"40\"\n              >\n                Create Account\n              </v-btn>\n            </v-form>\n            <router-link to=\"/\">Go to login-page</router-link>\n          </v-container>\n        </v-col>\n      </v-row>\n    </v-container>\n\n    <FooterView />\n  </v-app>\n</template>\n<script>\nimport FooterView from \"./FooterView.vue\";\nimport { ethers } from \"ethers\";\nimport { ABI, contractAddress } from \"../../constants\";\nexport default {\n  name: \"UserAccount\",\n  components: {\n    FooterView,\n  },\n  data() {\n    return {\n        name: \"\",\n        emal: \"\",\n            users: [],\n      valid: true,\n      name: \"\",\n      nameRules: [\n        (v) => !!v || \"Name is required\",\n        (v) => (v && v.length <= 10) || \"Name must be less than 10 characters\",\n      ],\n      email: \"\",\n      emailRules: [\n        (v) => !!v || \"E-mail is required\",\n        (v) => /.+@.+\\..+/.test(v) || \"E-mail must be valid\",\n      ],\n      password: \"\",\n      confirmPassword: \"\",\n      passwordRules: [(v) => !!v || \"Password is required\"],\n      confirmPasswordRules: [(v) => !!v || \"Password is required\"],\n    };\n  },\n  computed: {\n    passwordConfirmationRule() {\n      return () =>\n        this.password === this.confirmPassword || \"Password must match\";\n    },\n  },\n  methods: {\n    async createAccount(e) {\n      //  element.addEventListener(\"click\", createAccount),\n      e.preventDefault();\n      let name = this.name;\n      let email = this.email;\n      let password = this.password;\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, ABI, signer);\n      const response = await contract.createAccount(name, email, password);\n      console.log(response);\n      this.name = \"\";\n      this.email = \"\";\n      this.password = \"\";\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}