{"ast":null,"code":"import { ethers } from \"ethers\";\nimport { ABI, contractAddress } from \"../../constants\";\nexport default {\n  name: \"HomeView\",\n  data: () => ({\n    step: \"\",\n    path: \"\",\n    props: {\n      source: String\n    },\n    valid: true,\n    email: \"\",\n    emailRules: [v => !!v || \"E-mail is required\", v => /.+@.+\\..+/.test(v) || \"E-mail must be valid\"],\n    password: \"\",\n    passwordRules: [\n      //(v) => !!v || \"Password is required\",\n      //(v) => /.+@.+\\..+/.test(v) || \"Password invalid\",\n    ]\n  }),\n  methods: {\n    validate() {\n      this.$refs.form.validate();\n    },\n    async retrieveRequests() {\n      //verify if the browser is running MetaMask\n      if (typeof window.ethereum !== \"undefined\") {\n        await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        document.querySelector(\"#connectButton\").innerHTML = \"CONNECTED\";\n      } else {\n        document.querySelector(\"#connectButton\").innerHTML = \"please install metamask!\";\n      }\n      // this is for when the user has a metamask wallet but he or she is not on the correct network route them to Alphachain network\n    },\n\n    async loginAdmin() {\n      if (window.ethereum) {\n        const contract = (await getSignerContract()).contract;\n      }\n\n      // Connect to the Ethereum provider\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      // Get the first account\n      const signer = provider.getSigner();\n      // Define the contract ABI and address\n      const contract = new ethers.Contract(contractAddress, ABI, signer);\n      // Call the \"adminLogin()\" function from the smart contract\n      const result = await contract.adminLogin();\n      if (result) {\n        this.path = \"AdminOne\";\n      } else {\n        alert(\"not authorised\");\n      }\n    },\n    async loginUsers() {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, ABI, signer);\n      const result = await contract.loginUser();\n      if (result) {\n        this.path = \"StudentOne\";\n      } else {\n        alert(\"not authorised\");\n      }\n    }\n  }\n};","map":{"version":3,"mappings":"AA4GA;AACA;AAEA;EACAA;EACAC;IACAC;IACAC;IAEAC;MACAC;IACA;IACAC;IACAC;IACAC,aACAC,kCACAA,mDACA;IACAC;IACAC;MACA;MACA;IAAA;EAEA;EAEAC;IACAC;MACA;IACA;IACA;MACA;MACA;QACA;UAAAC;QAAA;QACAC;MACA;QACAA,qDACA;MACA;MACA;IACA;;IACA;MACA;QACA;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;QACA;MACA;QACAC;MACA;IACA;IAEA;MACA;MACA;MACA;MACA;MACA;QACA;MACA;QACAA;MACA;IACA;EACA;AACA","names":["name","data","step","path","props","source","valid","email","emailRules","v","password","passwordRules","methods","validate","method","document","alert"],"sourceRoot":"src/views","sources":["HomeView.vue"],"sourcesContent":["<template>\n  <v-container class=\"fill-height\" fluid>\n    <v-row align=\"center\" justify=\"center\">\n      <v-col cols=\"10\" sm=\"5\" md=\"5\">\n        <v-card class=\"cardB\" height=\"310px\">\n          <v-card-title class=\"text-h6 justify-center\"\n            >Student Admission Management System (SAMS)</v-card-title\n          >\n          <v-divider></v-divider>\n          <v-container>\n            <v-card-actions>\n              <div class=\"row\">\n                <v-form\n                  class=\"col s10\"\n                  ref=\"form\"\n                  v-model=\"valid\"\n                  lazy-validation\n                >\n                  <div class=\"row\">\n                    <div class=\"input-field col 10\">\n                      <v-text-field\n                        v-model=\"email\"\n                        :rules=\"emailRules\"\n                        label=\"Email:\"\n                        required\n                      ></v-text-field>\n                    </div>\n                  </div>\n\n                  <div class=\"row\">\n                    <div class=\"input-field col 10\">\n                      <v-text-field\n                        v-model=\"password\"\n                        :rules=\"passwordRules\"\n                        label=\"Password:\"\n                        required\n                      ></v-text-field>\n                    </div>\n                  </div>\n                  <div class=\"row\">\n                    <div class=\"mt-2\">\n                      <v-btn\n                        :to=\"{ path }\"\n                        width=\"200\"\n                        height=\"40\"\n                        color=\"primary\"\n                        class=\"mr-4\"\n                        elevation=\"20\"\n                        center\n                        @click=\"loginUsers()\"\n                      >\n                        LOGIN\n                      </v-btn>\n                      <div class=\"mt-2\">\n                        <v-btn\n                          :to=\"{ path }\"\n                          width=\"200\"\n                          height=\"40\"\n                          color=\"primary\"\n                          elevation=\"20\"\n                          @click=\"loginAdmin()\"\n                        >\n                          ADMIN LOGIN\n                        </v-btn>\n                      </div>\n                    </div>\n                  </div>\n                </v-form>\n              </div>\n            </v-card-actions>\n\n            <v-container class=\"mt-5\">\n              <v-row>\n                <v-col cols=\"12\" md=\"6\">\n                  <router-link to=\"/\">Forgot Password?</router-link>\n                </v-col>\n\n                <v-col cols=\"12\" md=\"6\">\n                  <router-link to=\"/UserAccount\">Create Account</router-link>\n                </v-col>\n              </v-row>\n              <v-btn\n                id=\"connectButton\"\n                width=\"200\"\n                height=\"40\"\n                color=\"primary\"\n                elevation=\"20\"\n                @click=\"retrieveRequests()\"\n              >\n                CONNECT\n              </v-btn>\n            </v-container>\n          </v-container>\n        </v-card>\n      </v-col>\n    </v-row>\n\n    <v-footer color=\"#f5f5f5\" class=\"footer\">\n      <v-row justify=\"center\" no-gutters>\n        <p class=\"text-center mt-2 mb-0\">\n          <v-icon>mdi-copyright</v-icon> Copyright UDOM-Student Admission\n          System. All Rights Reserved {{ new Date().getFullYear() }}\n        </p>\n      </v-row>\n    </v-footer>\n  </v-container>\n</template>\n<script>\nimport { ethers } from \"ethers\";\nimport { ABI, contractAddress } from \"../../constants\";\n\nexport default {\n  name: \"HomeView\",\n  data: () => ({\n    step: \"\",\n    path: \"\",\n\n    props: {\n      source: String,\n    },\n    valid: true,\n    email: \"\",\n    emailRules: [\n      (v) => !!v || \"E-mail is required\",\n      (v) => /.+@.+\\..+/.test(v) || \"E-mail must be valid\",\n    ],\n    password: \"\",\n    passwordRules: [\n      //(v) => !!v || \"Password is required\",\n      //(v) => /.+@.+\\..+/.test(v) || \"Password invalid\",\n    ],\n  }),\n\n  methods: {\n    validate() {\n      this.$refs.form.validate();\n    },\n    async retrieveRequests() {\n      //verify if the browser is running MetaMask\n      if (typeof window.ethereum !== \"undefined\") {\n        await window.ethereum.request({ method: \"eth_requestAccounts\" });\n        document.querySelector(\"#connectButton\").innerHTML = \"CONNECTED\";\n      } else {\n        document.querySelector(\"#connectButton\").innerHTML =\n          \"please install metamask!\";\n      }\n      // this is for when the user has a metamask wallet but he or she is not on the correct network route them to Alphachain network\n    },\n    async loginAdmin() {\n        if (window.ethereum) {\n          const contract = (await getSignerContract()).contract\n        }\n\n      // Connect to the Ethereum provider\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      // Get the first account\n      const signer = provider.getSigner();\n      // Define the contract ABI and address\n      const contract = new ethers.Contract(contractAddress, ABI, signer);\n      // Call the \"adminLogin()\" function from the smart contract\n      const result = await contract.adminLogin();\n      if (result) {\n        this.path = \"AdminOne\";\n      } else {\n        alert(\"not authorised\");\n      }\n    },\n\n    async loginUsers() {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, ABI, signer);\n      const result = await contract.loginUser();\n      if (result) {\n        this.path = \"StudentOne\";\n      } else {\n        alert(\"not authorised\");\n      }\n    },\n  },\n};\n</script>\n<style scoped>\n.cardB {\n  background: #f5f5f5;\n  box-shadow: 0px 4px 4px rgba(255, 255, 255, 0.5);\n}\n.footer {\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n  height: 60px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}